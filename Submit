#!/bin/sh

# Use Submit -h | --help to show usage.
# Use this script at your own discretion.
# This script automatically calibrates Link0 parms for .gjf files and then inject them through qsub.
# use -p to assign core numbers, -m to assign memory size (in GB) and -l to assign lindaworkers number.

# !!!VERY IMPORTANT!!!
# Multi-gjf simutaneous submit supported! (pass multiple filenames will do.)
# if no %nprocs / %mem / %lindaworkers is assigned, original gjf parms will be respected.
# IF ANY parameter is assigned a value (i.e. "-m 5"), it will be effective on the latter gjfs UNTIL it is re-assigned (i.e. "-m 4")

# Example: submit -p 12 -m 5 task1.gjf task2.gjf ...

# RUN WITH PRECAUTION!
# Created by Yuanqi Wang @CCMBI, Dec, 2018. Modification Allowed. Absolutely NO WARRANTY!
######################################

# this script combines multiple commands:
# 1. dos2unix <yourgjf>
# 2. Adjust link0 resources parameters (nprocs / mem)
# 3. gensub_g09 <yourgjf>
# 4. Calibrate sub file
# 5. qsub <your_sub_bash_script>

######################################

# Define colors
NC='\033[0m'

Red='\033[0;31m'
Green='\033[0;32m'
Blue='\033[0;34m'
Purple='\033[0;35m'
Yellow='\033[1;33m'

######################################

#Define Functions:

usage()
{
    printf "${Red}SYNOPSIS${NC}\n\n"
    printf "  ${Yellow}Submit${NC}\n"
    printf "    (no args) ${Blue}...${NC} respect original gjf parameters and submit.\n"
    printf "    [-h | --help] show this help.\n"
    printf "    [-l | --linda] ${Green}<Lindaworkers No.> ${Blue}...${NC} Assign ${Green}<Lindaworkers No.>${NC} to ${Red}%%lindaworkers${NC}.\n"
    printf "    [-m | --mem] ${Green}<Mem Size>${NC} ${Blue}...${NC} Assign ${Green}<Mem Size>${NC} to ${Red}%%mem${NC}.\n"
    printf "    [-p | --nprocs] ${Green}<Procs No.>${NC} ${Blue}...${NC} Assign ${Green}<Procs No.>${NC} to ${Red}%%nprocs${NC}.\n"
    printf "    [-q | --queue] ${Green}<Queue Name>${NC} ${Blue}...${NC} Change designated queue to ${Green}<Queue Name>${NC}.\n"
    printf "    [-t | --test] make calibrations, but ${Red}DO NOT${NC} submit.\n\n"
    printf "${Red}DESCRIPTION${NC}\n\n"
    printf "  ${Yellow}\'Submit\'${NC} is used to calibrate Gaussian input files and inject through qsub.\n"
    printf "  Arguments above can be mixed. each argument is effective ${Purple}until it is re-defined${NC}.\n"
    printf "  Wildcard currently not supported.\n"
    printf "  Created with ${Red}LOVE${NC} by ${Blue}Yuanqi Wang${NC} ${Purple}@CCMBI${NC}(Dec, 2018). ${Yellow}ABSOLUTELY NO WARRANTY!${NC}\n\n"
}

if_submit=true  # flag: whether to submit through qsub.
input_file=false    # flag: whether at least 1 gjf is imported.

if [ "$1" != "" ]   # if arguments / files are imported.
    then
        while [ "$1" != "" ]    # read in parameters and files one by one.
            do
                case $1 in
                    -h | --help )   # help
                        usage
                        exit 0
                        ;;
                    -p | --nprocs ) # CPU core numbers.
                        shift
                        re='^[0-9]+$' # Must be integer.
                        if ! [[ $1 =~ $re ]]    # If not integer.
                            then
                                printf "${Red}Error:${NC} ${Green}%%nprocs${NC} needs to be an ${Red}integer${NC}!\n"
                                exit 1
                            else
                                nprocs=$1   # assign $1 to variable nprocs
                        fi
                        ;;
                    -m | --mem )    # memory size (in GB)
                        shift
                        re='^[0-9]+$'   # Must be integer.
                        if ! [[ $1 =~ $re ]]    # If not integer.
                            then
                                printf "${Red}Error:${NC} ${Green}%%mem${NC} needs to be an ${Red}integer${NC}!\n"
                                exit 1
                            else
                                mem=$1   # assign $1 to variable mem
                        fi
                        ;;
                    -l | --linda )  # lindaworkers numbers
                        shift
                        re='^[0-9]+$'   # Must be integer.
                        if ! [[ $1 =~ $re ]]    # If not integer.
                            then
                                print "${Red}Error:${NC} ${Green}%%lindaworkers${NC} needs to be an ${Red}integer${NC}!\n"
                                exit 1
                            else
                                linda=$1  # assign $1 to variable linda
                        fi
                        ;;
                    -q | --queue )  # queue name.
                        shift
                        queue=$1    # assign queue name to variable queue.
                        ;;
                    -t | --test )   # enter test mode: do not submit generated sub files.
                        if_submit=false # change flag status to false.
                        ;;
                    * )
                        if [ -f $1 ]
                            then
                                input_file=true # mark at least 1 gjf input successful.
                                dos2unix $1 2> /dev/null # essential to get rid of "^M"s (DOS special)

                                if [ -n "${nprocs}" ] # if any -nprocs was set previous to this gjf:
                                    then
                                        sed -i "s/%nprocs=.*/%nprocs=${nprocs}/"  $1    # replace original nprocs value.
                                fi
                                if [ -n "${mem}" ] # if any -mem was set previous to this gjf:
                                    then
                                        sed -i "s/%mem=.*/%mem=${mem}GB/"  $1    # replace original mem value.
                                fi
                                if [ -n "${linda}" ] # if any -lindaworkers was set previous to this gjf:
                                    then
                                        sed -i "s/%.indaworkers=.*/%Lindaworkers=${linda}/"  $1    # replace original Lindaworkers value and corrent "L" capitalize problem.
                                    else
                                        sed -i "s/%.indaworkers=/%Lindaworkers=/" $1
                                fi

                                # generate sub_g09_xxx.sh files after .gjf is ready
                                gensub_g09 $1                    # generate .sh submission file
                                submit_sh="sub_g09_${1%.*}.sh"   # locate sub_g09_xxx.sh filename

                                # adjust queue settings in sub_g09_xxx.sh files.
                                if [ -n "${queue}" ] # if $queue is defined, this parameter must be made change to the sub_g09_xxx.sh file.
                                    then
                                        sed -i "s/#PBS -q .*/#PBS -q ${queue}/" $submit_sh  # replace default queue.
                                fi

                                # rename report_xxx files before the jobs to make them look nicer.
                                sed -i "/LOGFILE=.*/i\HOSTNAME=\`hostname | tr -dc '0-9'\`" $submit_sh # get the hostname of the central node. (where tmp folder lies)
                                sed -i "s/LOGFILE=report_log_.*/LOGFILE=${1%.*}_\${TmpID}_\${HOSTNAME}.info/" $submit_sh # change log filename definition.

                                # submit
                                if [ "$if_submit" = true ]
                                    then
                                        id=$(qsub $submit_sh | cut -d "." -f 1) # submit job to qsub and get job id.
                                        rm "sub_g09_${1%.*}.sh" # trash submission file
                                        sleep 2
                                        stat=$(qstat -f | awk -v id="$id" 'BEGIN {RS = "\n\n+";ORS = "\n\n"} $0~id' | grep -o -P '(?<=job_state = )[A-Z]')
                                        case $stat in
                                            "R" )
                                                node=$(qstat -f | awk -v id="$id" 'BEGIN {RS = "\n\n+";ORS = "\n\n"} $0~id' | grep -o -P '(?<=node)\d+(?=\/)' | sort -u)
                                                node=$(echo $node)
                                                printf "${Green}$1${NC} submitted as job ${Red}${id}${NC} on ${Blue}node ${node}${NC}.(Running)\n"
                                                ;;
                                            "Q" )
                                                printf "${Green}$1${NC} submitted as job ${Red}${id}${NC}.(Queued)\n"
                                                ;;
                                            * )
                                                printf "${Green}$1${NC} status abnormal / not in queue anymore.\n"
                                        esac
                                    else
                                        printf "${Green}$1${NC} NOT submitted.\n"
                                        exit 0
                                fi
                            else
                                printf "${Red}Error:${NC} Unknown argument or file not exist.\n"
                                printf "Type ${Blue}\'Submit [-h | --help]\'${NC} for help.\n"
                                exit 1
                        fi
                esac
                shift
            done

            if [ "$input_file" = false ]
                then
                    printf "${Red}Error:${NC} No input gjf files.\nType ${Blue}\'Submit [-h | --help]\'${NC} for help.\n"
                    exit 1
            fi

        exit 0
    else
        usage
        exit 1
fi

exit 0
